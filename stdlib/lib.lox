class Object {
  keys() {
    return getInstanceFields(this);
  }
  get(key) {
    return getInstanceFieldValueByKey(this, key);
  }
  set(key, value) {
    setInstanceFieldValueByKey(this, key, value);
    return this;
  }
}

fun _array_filter(arr, callback) {
  var result = Array();
  for(var i = 0; i < arr.count(); i = i + 1) {
    if(callback(arr.get(i))) {
      result.push(arr.get(i));
    }
  }
  return result;
}

fun _array_map(arr, callback) {
  var result = Array();
  for(var i = 0; i < arr.count(); i = i + 1) {
    result.push(callback(arr.get(i)));
  }
  return result;
}

fun _array_foreach(arr, callback) {
  for(var i = 0; i < arr.count(); i = i + 1) {
    callback(arr.get(i), i);
  }
}

fun _array_slice(arr, start, end) {
  var result = Array();
  for(var i = start; i < end and i >= 0; i = i + 1) {
    result.push(arr.get(i));
  }
  return result;
}

fun _string_replace(str, search, replace) {
  var result = "";
  var split = str.split(search);
  var len = split.count();
  split.forEach(fun (part, idx) {
    result = result + part;
    if(idx < len - 1) {
      result = result + replace;
    }
  });
  return result;
}
